import math
from abc import ABC
from Problem import AbsProblem


class Problem12(AbsProblem, ABC):
    details = "Project Euler. Problem 12:\n" \
              "The sequence of triangle numbers is generated by adding the natural numbers. \n" \
              "So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. \n" \
              "The first ten terms would be:\n" \
              "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n" \
              "Let us list the factors of the first seven triangle numbers:\n" \
              "     1: 1\n" \
              "     3: 1,3\n" \
              "     6: 1,2,3,6\n" \
              "    10: 1,2,5,10\n" \
              "    15: 1,3,5,15\n" \
              "    21: 1,3,7,21\n" \
              "    28: 1,2,4,7,14,28\n" \
              "We can see that 28 is the first triangle number to have over five divisors.\n" \
              ">>What is the value of the first triangle number to have over five hundred divisors?"

    @property
    def getinfo(self):
        return self.details

    def result(self):
        i = 0
        tnum = 0
        a = True
        maxd = 0
        while a:
            i += 1
            tnum += i
            # print(tnum)
            divcnt = len(self.FindAllDivisors(tnum))
            if divcnt > 500:
                # print("RESULT: %d" % tnum)
                # print(divcnt)
                a = False
                break
            if divcnt > maxd:
                maxd = divcnt
                # print("%d: %d" % (tnum, maxd))
        result = tnum
        return result

    def FindAllDivisors(self, x):
        divList = []
        y = 1
        while y <= math.sqrt(x):
            if x % y == 0:
                divList.append(y)
                divList.append(int(x / y))
            y += 1
        return divList
